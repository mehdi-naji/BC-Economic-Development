library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
library(sf)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Labour_Productivity_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
# Load Canada provinces shapefile (you need to have this file)
canada <- st_read("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Canada_Provincial_boundaries_generalized.shp")
runApp('C:/Users/MNAJI/StrongerBC-Project/Labour_Productivity')
# Libraries ----
library(shiny)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
library(sf)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Labour_Productivity_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
# Load Canada provinces shapefile
canada <- st_read("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Libraries ----
library(shiny)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
library(sf)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Labour_Productivity_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
# Load Canada provinces shapefile
canada <- st_read("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Load Canada provinces shapefile
sf::gdal_set_option("SHAPE_RESTORE_SHX", "YES")
# Load Canada provinces shapefile
sf::gdal_set_option("SHAPE_RESTORE_SHX", "YES")
canada <- st_read("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Load Canada provinces shapefile
canada <- sf::read_sf("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
runApp('C:/Users/MNAJI/StrongerBC-Project/Labour_Productivity')
# Load Canada provinces shapefile
canada <- sf::read_sf("https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
library (gdal)
install.packages("gdal)
install.packages("gdal")
install.packages("rgdal", type = "source")
shiny::runApp('C:/Users/MNAJI/StrongerBC-Project/Research_and_Development')
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
df1 <- statcan_download_data("36-10-0222-01", "eng")
df1$REF_DATE <- ymd(df1$REF_DATE)
df1$Year <- year(df1$REF_DATE)
selected_sectors <- c(11:16, 38)
filter_conditions  <- sapply(selected_sectors, function(x) grepl(paste0("\\..*\\.", x, "$"), df1$COORDINATE))
filter_conditions <- apply(filter_conditions, 1, any)
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices == c("Current prices", "Chained (2017) dollars"))
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices) |>
mutate(Estimates_per_GDP = Estimates)
View(df3)
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE)
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices == c("Current prices", "Chained (2017) dollars"))
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices == c("Current prices", "Chained (2017) dollars"))
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices == c("Current prices", "Chained (2017) dollars"))
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE)
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices == c("Current prices", "Chained (2017) dollars"))
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars"))
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE)
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE)
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = ifelse(Estimates == "Gross domestic product at market prices", VALUE, NA))
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"][1])
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars"))
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"][1])
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars"))
df3 <- df2
df3 <- df3 |>
group_by(Year, GEO, Prices, Estimates) |>
mutate(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df3 <- df2
df3 <- df3 |>
group_by(Year, GEO, Prices, Estimates) |>
summarise(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df3 <- df2
df3 <- df3 |>
group_by(Year, GEO, Prices) |>
summarize(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df3 <- df2
df3 <- df3 |>
group_by(Year, GEO, Prices, Estimates) |>
summarize(Estimates_per_GDP = VALUE[Estimates == "Gross domestic product at market prices"])
df3 <- df2
df3 <- df2 %>%
group_by(Year, GEO, Prices) %>%
mutate(Estimates_per_GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]))
df3 <- df2
df3 <- df2 %>%
group_by(Year, GEO, Prices) %>%
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = Estimates/GDP)
df3 <- df2
df3 <- df2 %>%
group_by(Year, GEO, Prices) %>%
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = VALUE/GDP)
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices) |>
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = 100*VALUE/GDP)
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices) |>
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = round(100*VALUE/GDP,1))
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
df1 <- statcan_download_data("36-10-0222-01", "eng")
df1$REF_DATE <- ymd(df1$REF_DATE)
df1$Year <- year(df1$REF_DATE)
selected_sectors <- c(11:16, 38)
filter_conditions  <- sapply(selected_sectors, function(x) grepl(paste0("\\..*\\.", x, "$"), df1$COORDINATE))
filter_conditions <- apply(filter_conditions, 1, any)
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars"))
df3 <- df2
df3 <- df2 |>
group_by(Year, GEO, Prices) |>
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = round(100*VALUE/GDP,1))
# write.csv(df1, "~/StrongerBC-Project/Data/VA_Exporsts_1.csv", row.names = FALSE)
write.csv(df2, "C:/Users/MNAJI/StrongerBC-Project/Data/Non_Residential_Investment_1.csv", row.names = FALSE)
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
df1 <- statcan_download_data("36-10-0222-01", "eng")
df1$REF_DATE <- ymd(df1$REF_DATE)
df1$Year <- year(df1$REF_DATE)
selected_sectors <- c(11:16, 38)
filter_conditions  <- sapply(selected_sectors, function(x) grepl(paste0("\\..*\\.", x, "$"), df1$COORDINATE))
filter_conditions <- apply(filter_conditions, 1, any)
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars")) |>
group_by(Year, GEO, Prices) |>
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = round(100*VALUE/GDP,1))
# write.csv(df1, "~/StrongerBC-Project/Data/VA_Exporsts_1.csv", row.names = FALSE)
write.csv(df2, "C:/Users/MNAJI/StrongerBC-Project/Data/Non_Residential_Investment_1.csv", row.names = FALSE)
runApp('C:/Users/MNAJI/StrongerBC-Project/Research_and_Development')
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
df1 <- statcan_download_data("27-10-0273-01", "eng")
df2 <- statcan_download_data("27-10-0273-02", "eng")
df3 <- statcan_download_data("27-10-0359-01", "eng")
df1$Funder <- substring(df1$Funder, 8, nchar(df1$Funder))
df1$Performer <- substring(df1$Performer, 11, nchar(df1$Performer))
df1$REF_DATE <- ymd(df1$REF_DATE)
df2$REF_DATE <- ymd(df2$REF_DATE)
df3$REF_DATE <- ymd(df3$REF_DATE)
df1$Year <- year(df1$REF_DATE)
df2$Year <- year(df2$REF_DATE)
df3$Year <- year(df3$REF_DATE)
df1 <- df1 |> filter (Prices %in% c("Current prices", "2017 constant prices"))
df2 <- df2 |> filter (Prices %in% c("Current prices", "2017 constant prices"))
df1 <- select(df1, Year, GEO, Funder, Performer, `Science type`, Prices, VALUE)
df2 <- select(df2, Year, GEO, Funder, Performer, `Science type`, Prices, VALUE)
df3 <- select(df3, Year, GEO, VALUE)
View(df1)
View(df2)
View(df1)
View(df2)
View(df3)
View(df3)
View(df3)
runApp('C:/Users/MNAJI/StrongerBC-Project/Research_and_Development')
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Research_and_Development_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
runApp('C:/Users/MNAJI/StrongerBC-Project/Research_and_Development')
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
df1 <- statcan_download_data("36-10-0222-01", "eng")
df1$REF_DATE <- ymd(df1$REF_DATE)
df1$Year <- year(df1$REF_DATE)
selected_sectors <- c(11:16, 38)
filter_conditions  <- sapply(selected_sectors, function(x) grepl(paste0("\\..*\\.", x, "$"), df1$COORDINATE))
filter_conditions <- apply(filter_conditions, 1, any)
df2 <- df1[filter_conditions, ]
df2 <- df2 |>
select(Year, GEO, Prices, Estimates, UOM, SCALAR_FACTOR, VALUE) |>
filter(Prices %in% c("Current prices", "Chained (2017) dollars")) |>
group_by(Year, GEO, Prices) |>
mutate(GDP = first(VALUE[Estimates == "Gross domestic product at market prices"]),
Estimate_per_GDP = round(100*VALUE/GDP,1))
View(df2)
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
# Libraries ----
library(shiny)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Non_Residential_Investment_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
# Libraries ----
library(shiny)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Non_Residential_Investment_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
df <- df |>
filter (Estimates != "Gross domestic product at market prices") |>
mutate(VALUE = VALUE * 1000000)
# Static inputs ----
# modal_title1 <- "Private sector investment in innovation"
# modal_text1 <- paste("The amount spent on research and development by the business enterprise sector (not adjusted for inflation) in")
# modal_title2 <- "Value-added exports"
# modal_title3 <- "Non-residential structures, machinery and equipment and IP investment as share of GDP"
# modal_title4 <- "Labour Productivity"
# modal_title5 <- "Exports as % of GDP"
# User Interface -----
## ui_components ----
### line plot ----
ui_lineplot <- column(6,plotlyOutput("line_plot"))
### table ----
ui_table <-  column(3, DT::dataTableOutput("table"))
### barplot ----
ui_barplot <- column(4, plotlyOutput("barplot"))
### sankey graph ----
ui_sankey <- column(5,plotlyOutput("sankey_diagram"))
### tabs ----
ui_text_tabs <- column(6, tabsetPanel(
tabPanel("Analysis",
uiOutput("analysis")),
tabPanel("Considerations",
uiOutput("consideration"))))
# Libraries ----
library(shiny)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(lubridate)
library(plotly)
library(leaflet)
library(cowplot)
library(grid)
library(gtable)
library(shinydashboard)
library(RColorBrewer)
options(shiny.autoreload = TRUE)
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Non_Residential_Investment_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
df <- df |>
filter (Estimates != "Gross domestic product at market prices") |>
mutate(VALUE = VALUE * 1000000)
# User Interface -----
## ui_components ----
### line plot ----
ui_lineplot <- column(6,plotlyOutput("line_plot"))
### table ----
ui_table <-  column(3, DT::dataTableOutput("table"))
### barplot ----
ui_barplot <- column(4, plotlyOutput("barplot"))
### sankey graph ----
ui_sankey <- column(5,plotlyOutput("sankey_diagram"))
### tabs ----
ui_text_tabs <- column(6, tabsetPanel(
tabPanel("Analysis",
uiOutput("analysis")),
tabPanel("Considerations",
uiOutput("consideration"))))
## design -----
ui <- dashboardPage(
dashboardHeader(
title = tags$a(
tags$img(src='https://raw.githubusercontent.com/mehdi-naji/StrongerBC-Project/main/logo.png', height='40', width='200', style="padding-left: 25px;float: left;") ,
tags$span("Non-residential investment as a share of GDP", style = " color: black;font-size: 130%; "),
href='https://strongerbc.shinyapps.io/research_and_development/',
),titleWidth = 600
),
dashboardSidebar(
collapsed = TRUE,
sidebarMenu(
### input list ----
menuItem("Inputs", tabName = "inputs", icon = icon("dashboard")),
selectInput("geo", "Region", choices = unique(df$GEO), selected = "British Columbia"),
selectInput("prices", "Price type", choices = unique(df$Prices)),
selectInput("item", "Item", choices = unique(df$Estimates)),
selectInput("year", "Year", choices = unique(df$Year), selected = 2020)
)
),
dashboardBody(
tags$style(HTML("
.skin-blue .main-header .navbar,
.skin-blue .main-header .logo,
.skin-blue .main-header .logo:hover,
.skin-blue .main-header .navbar .sidebar-toggle,
.skin-blue .main-header .navbar .sidebar-toggle:hover,
.skin-blue .content-header,
.skin-blue .wrapper,
.content-wrapper,
.right-side   {
background-color: white;
color: black;
}
.skin-blue .main-header .navbar .sidebar-toggle {
position: fixed;
left:0;
}
")),
tags$style(type="text/css",
".shiny-output-error-validation {
font-size: 15px;
}"
),
tags$head(tags$style(".modal-dialog { width: 80%; }")),
tags$head(tags$style(".modal-body { min-height: 700px; }")),
fluidPage(
# modalDialog(
#   easyClose = TRUE,
#   size = "l",
#   footer = tagList(modalButton("OK")),
#   fluidRow(
#     column(4, style = "height: 400px; background-color: white;margin-buttom: 10px;margin-right: 10px;"),
#     column(2, style = "height: 400px; background-color: white; border: 1px solid darkgreen; margin-right: 10px;margin-buttom: 10px;",
#            h4(modal_title1, style = "color: darkgreen; font-weight: bold;"),
#            p(modal_text1),
#            p(Modal_df$Year,
#              style = "font-size: 30px; font-family: Arial; color: darkgreen;"),
#            p(paste0("$", format(Modal_df$PrivateInvestment/1000, big.mark = ",", scientific = FALSE), "billion"),
#              style = "font-size: 40px; font-family: Arial; color: black;")),
#     column(2, style = "height: 400px; background-color: white; border: 1px solid darkgreen; margin-right: 10px;margin-buttom: 10px;",
#            h4(modal_title2, style = "color: darkgreen; font-weight: bold;"),
#            p("$200,000", style = "color: black;")),
#     column(2, style = "height: 400px; background-color: white; border: 1px solid darkgreen; margin-right: 10px;margin-buttom: 10px;",
#            h4(modal_title3, style = "color: darkgreen; font-weight: bold;"),
#            p("$300,000", style = "color: black;")),
#     column(1, style = "height: 400px; background-color: darkgreen;margin-buttom: 10px;")
#   ),
#   fluidRow(
#     column(4, style = "height: 400px; background-color: darkgreen;margin-right: 10px; margin-top: 10px;",
#            h2("Fostering \n Innovation Across Economy", style = "color: white; font-size: 300%;")),
#     column(3, style = "height: 400px; background-color: white; border: 1px solid darkgreen; margin-right: px; margin-top: 10px;",
#            h4(modal_title4, style = "color: darkgreen; font-weight: bold;"),
#            p("$400,000", style = "color: black;")),
#     column(3, style = "height: 400px; background-color: white; border: 1px solid darkgreen; margin-top: 10px;",
#            h4(modal_title5, style = "color: darkgreen; font-weight: bold;"),
#            p("$500,000", style = "color: black;")),
#     column(1, style = "height: 400px; background-color: white;")
#   )
# ),
),
fluidRow(
ui_lineplot, ui_text_tabs),
fluidRow(
ui_sankey, ui_table, ui_barplot),
fluidPage(
textOutput("source")
)
## design -----
ui <- dashboardPage(
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
runApp('C:/Users/MNAJI/StrongerBC-Project/Non_Residential_Investment')
