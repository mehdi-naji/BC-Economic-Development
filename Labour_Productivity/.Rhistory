df <- na.omit(df)
View(df)
unique(df$GEO)
unique(Canada$Name_EN)
unique(canada$Name_EN)
typeof(value)
value[3]
value[5]
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
# Downloading processed data ----
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Labour_Productivity_1.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
# Load Canada provinces shapefile (you need to have this file)
canada <- st_read("C:/Users/mehdi/Downloads/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
View(df)
map_data <- df |>
filter(
GEO != "Canada",
Year == 2019,
Labour.productivity.and.related.measures == "Total number of jobs",
Industry == "All industries"
) |>
select(
GEO, Labour.productivity.and.related.measures, Industry, VALUE
)
View(map_data)
df_map <- map_data
map_data <- merge(canada, df_map, by.x = "Name_EN", by.y = "GEO")
View(map_data)
map_data <- df |>
filter(
GEO != "Canada",
Year == 2019,
Labour.productivity.and.related.measures == "Total number of jobs",
Industry == "All industries"
) |>
select(
GEO, Labour.productivity.and.related.measures, Industry, VALUE
)
df_map <- map_data
map_data <- merge(df_map, canada, , by.x = "GEO", by.y = "Name_EN")
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = map_data$VALUE)
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = VALUE,
title = "Value",
position = "bottomright")
map_data <- df |>
filter(
GEO != "Canada",
Year == 2019,
Labour.productivity.and.related.measures == "Total number of jobs",
Industry == "All industries"
) |>
select(
GEO, Labour.productivity.and.related.measures, Industry, VALUE
)
df_map <- map_data
map_data <- merge(df_map, canada, , by.x = "GEO", by.y = "Name_EN")
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = map_data$VALUE)
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = VALUE,
title = "Value",
position = "bottomright")
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron)
return(p2)
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron)
p2
p2
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2)))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = VALUE,
title = "Value",
position = "bottomright")
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2)))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2)))
map_data$VALUE
typeof(map_data$VALUE)
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = map_data$VALUE,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = map_data$VALUE,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = VALUE,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", "round(VALUE, 2)"))
# Load required libraries
library(leaflet)
library(sf)
library(RColorBrewer)
# Load Canada provinces shapefile (you need to have this file)
canada <- st_read("C:/Users/mehdi/Downloads/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Generate random values for each province
set.seed(123)
value <- runif(n = nrow(canada), min = 0, max = 100)
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = value)
# Create a leaflet map
leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(value),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(value, 2))) %>%
leaflet::addLegend(pal = pal,
values = value,
title = "Value",
position = "bottomright")
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = VALUE,
title = "Value",
position = "bottomright")
View(map_data)
# Generate random values for each province
set.seed(123)
value <- runif(n = nrow(canada), min = 0, max = 100)
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = value)
pal
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = map_data$VALUE)
pal
p2 <- leaflet(data = map_data, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(.$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(.$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = .$VALUE,
title = "Value",
position = "bottomright")
View(canada)
View(df_map)
map_data <- df |>
filter(
GEO != "Canada",
Year == 2019,
Labour.productivity.and.related.measures == "Total number of jobs",
Industry == "All industries"
) |>
select(
GEO, Labour.productivity.and.related.measures, Industry, VALUE
)
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = map_data$VALUE)
p2 <- leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(map_data$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = map_data$VALUE,
title = "Value",
position = "bottomright")
return(p2)
p2
p2 <- leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", map_data$GEO, "</b><br>Value: ", round(map_data$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = map_data$VALUE,
title = "Value",
position = "bottomright")
p2
# Load required libraries
library(leaflet)
library(sf)
library(RColorBrewer)
# Load Canada provinces shapefile (you need to have this file)
canada <- st_read("C:/Users/mehdi/Downloads/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Generate random values for each province
set.seed(123)
value <- runif(n = nrow(canada), min = 0, max = 100)
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = value)
# Create a leaflet map
leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(value),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", "NAME", "</b><br>Value: ", round(value, 2))) %>%
leaflet::addLegend(pal = pal,
values = value,
title = "Value",
position = "bottomright")
View(canada)
# Create a leaflet map
leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(value),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", Name_EN, "</b><br>Value: ", round(value, 2))) %>%
leaflet::addLegend(pal = pal,
values = value,
title = "Value",
position = "bottomright")
p2 <- leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", map_data$GEO, "</b><br>Value: ", round(map_data$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = Name_EN,
title = "Value",
position = "bottomright")
p2
# Load required libraries
library(leaflet)
library(sf)
library(RColorBrewer)
# Load Canada provinces shapefile (you need to have this file)
canada <- st_read("C:/Users/mehdi/Downloads/Provinces_and_Territories_of_Canada/Canada_Provincial_boundaries_generalized.shp")
# Generate random values for each province
set.seed(123)
value <- runif(n = nrow(canada), min = 0, max = 100)
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = value)
# Create a leaflet map
leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(value),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", Name_EN, "</b><br>Value: ", round(value, 2))) %>%
leaflet::addLegend(pal = pal,
values = value,
title = "Value",
position = "bottomright")
View(canada)
p2 <- leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", Name_EN, "</b><br>Value: ", round(map_data$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = map_data$VALUE,
title = "Value",
position = "bottomright")
map_data <- df |>
filter(
GEO != "Canada",
Year == 2019,
Labour.productivity.and.related.measures == "Total number of jobs",
Industry == "All industries"
) |>
select(
GEO, Labour.productivity.and.related.measures, Industry, VALUE
)
df_map <- map_data
map_data <- merge(df_map, canada, , by.x = "GEO", by.y = "Name_EN")
# Create a color palette
pal <- colorNumeric(palette = "viridis", domain = map_data$VALUE)
p2 <- leaflet(data = canada, options = leafletOptions(minZoom = 2.5, maxZoom = 2.5, dragging = FALSE, doubleClickZoom = FALSE, scrollWheelZoom = FALSE, touchZoom = FALSE, keyboard = FALSE)) %>%
fitBounds(lng1 = min(st_bbox(canada)[c(1, 3)]),
lat1 = min(st_bbox(canada)[c(2, 4)]),
lng2 = max(st_bbox(canada)[c(1, 3)]),
lat2 = max(st_bbox(canada)[c(2, 4)])) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(map_data$VALUE),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
# Add a popup feature that shows the province name and the value
popup = ~paste0("<b>", Name_EN, "</b><br>Value: ", round(map_data$VALUE, 2))) %>%
leaflet::addLegend(pal = pal,
values = map_data$VALUE,
title = "Value",
position = "bottomright")
p2
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
runApp('StrongerBC-Project/Labour_Productivity')
